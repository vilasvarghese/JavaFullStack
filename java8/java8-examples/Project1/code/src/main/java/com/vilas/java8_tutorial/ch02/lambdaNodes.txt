Refer lambdaImpl.java before this.

Consider a simple method:

-----------------------------------------------------------------------
	public class WelcomeToProgrammingWorld {
		public static void main(String[] args) {
			System.out.println("Welcome to world of Java Programming Language!");
		}
	}
-----------------------------------------------------------------------

Now, what if I also need to welcome you in Groovy and Python. 


-----------------------------------------------------------------------
	public class WelcomeToProgrammingWorld {
		public static void main(String[] args) {
			System.out.println("Welcome to world of Java Programming Language!");
			System.out.println("Welcome to world of Groovy Programming Language!");
			System.out.println("Welcome to world of Python Programming Language!");
		}
	}
-----------------------------------------------------------------------


Can we improve this code?
-----------------------------------------------------------------------
	public class WelcomeToProgrammingWorld {
		public static void main(String[] args) {
			welcomeToALanguage("Java");
			welcomeToALanguage("Groovy");
			welcomeToALanguage("Scala");
		}
		static void welcomeToALanguage(String language) {
			System.out.println("Welcome to world of " + language + "Programming Language");
		}
	}
-----------------------------------------------------------------------

Code can further be improved using Code to interface...
-----------------------------------------------------------------------
	public class WelcomeToProgrammingWorld {
		public static void main(String[] args) {
			WelcomeToALanguage welcomeToALanguage = new WelcomeToALanguage();
			welcomeToALanguage.welcome("Java");
			welcomeToALanguage.welcome("Groovy");
			welcomeToALanguage.welcome("Scala");
		}
	}
	interface Welcome {
		abstract void welcome(String string);
	}
	 
	class WelcomeToALanguage implements Welcome {
		@Override
		public void welcome(String language) {
			System.out.println("Welcome to world of " + language + "Programming Language");
		}
	}

-----------------------------------------------------------------------

Now the code is more generic
We can provide different implementations of welcome


Can we improve this using inner classes
-----------------------------------------------------------------------

	public class WelcomeToProgrammingWorld {
		public static void main(String[] args) {
			Welcome welcomeToALanguage = new Welcome() {
				@Override
				public void welcome(String language) {
					System.out.println("Welcome to world of " + language + "Programming Language");
				}
			};
			welcomeToALanguage.welcome("Java");
			welcomeToALanguage.welcome("Groovy");
			welcomeToALanguage.welcome("Scala");
		}
	}
	 
	interface Welcome {
		abstract void welcome(String string);
	}
-----------------------------------------------------------------------
Here there is an inner class. While compiling this generates a separate .class file.

Let's do it with lambda


-----------------------------------------------------------------------

	public class WelcomeToProgrammingWorld {
		public static void main(String[] args) {
			Welcome welcomeToALanguage = new Welcome() {
				@Override
				(String language) -> {
					System.out.println("Welcome to world of " + language + "Programming Language");
				}

			};
			welcomeToALanguage.welcome("Java");
			welcomeToALanguage.welcome("Groovy");
			welcomeToALanguage.welcome("Scala");
		}
	}
	 
	interface Welcome {
		abstract void welcome(String string);
	}
-----------------------------------------------------------------------


If you notice the difference:-

1. We have removed 
	access specifier 
	method definition  
	return type 
		as they are intuitive for compiler by interface method definition. 
		
2. A new operator "->" called Lambda expression 
	i.e. it’s the separator between input and output.

-------------------------------------------------------------------------
(String language) -> {
       System.out.println("Welcome to world of " + language + "Programming Language");
}
Above code snippet can be improved according to the rules 
-------------------------------------------------------------------------


Further rules 
Rule 1: 
	If you have only one parameter inside the expression, 
		then curly braces can be skipped. 
		Hence, the above code would look like:

-------------------------------------------------------------------------

(String language) -> System.out.println("Welcome to world of " + language + "Programming Language");
-------------------------------------------------------------------------


Rule 2:
As you have only one parameter, 
	you could remove brackets and input parameter type in the input argument

-------------------------------------------------------------------------
language -> System.out.println("Welcome to world of " + language + "Programming Language");
-------------------------------------------------------------------------

Points to note:
	No reference variable to reference Lambda expression.
	Java has not provided any class like Function to reference lambda. 
	Instead 
		To assign a lambda expression 
			you need to have 
				an interface 
			with only 
				one abstract method 
			and the compiler will automatically detect and assign it to that Interface reference variable.


An interface with a single method is known as a Functional Interface. 
--------------------------------------------------------------------

--------------------------------------------------------------------
public class WelcomeToProgrammingWorld {
    public static void main(String[] args) {
        Welcome welcomeToALanguage =  language -&gt; System.out.println("Welcome to world of " + language + "Programming Language");
        welcomeToALanguage.welcome("Java");
        welcomeToALanguage.welcome("Groovy");
        welcomeToALanguage.welcome("Scala");
    }
}
interface Welcome {
    abstract void welcome(String string);
}
--------------------------------------------------------------------


Lambda is different from Inner classes
--------------------------------------

If you print the instance variable

for inner class
	java8.lambda.expressions.WelcomeToProgrammingWorld$1@14ae5a5 


for the lambda expression.
	java8.lambda.expressions.WelcomeToProgrammingWorld$$Lambda$1/1096979270@682a0b20


	“Lambda expression seamlessly binds itself with the existing Java ecosystem.

Examples of lambda

1. A lambda expression with no parameters
() -> System.out.println("Hi!Lambda Expressions is great."); 

2. A lambda expression with one parameter
(String s) -> System.out.println("Hi!Lambda Expressions is great."+s);

3. Another lambda expression with one parameter
s -> System.out.println("Hi!Lambda Expressions is great."+s);

4. A lambda expression with 2 parameters (Note parantesis is required for 2 or more params)
(s1, s2) -> System.out.println("Hi!Lambda Expressions is great." + s1 + s2);

Some of its advantages are enlisted below: 
-----------------------------------------

1. Less boilerplate and more concise code.
2. Enables functional programming. You could read more about Functional programming, Lambda Calculus and Monads to understand Lambda expressions and how these enable functional programming.
3. Binds seamlessly with stream API & existing Java ecosystem where implementation varies for different streams.
4. Lambda's are functions 
	Can be considered like value.
	String name = "Vilas"
	MyInterface interface = ()-> System.out.println("testing");
		here the return is an implementation MyInterface.
		while invoking we invoke it as interface.myMethod();
		